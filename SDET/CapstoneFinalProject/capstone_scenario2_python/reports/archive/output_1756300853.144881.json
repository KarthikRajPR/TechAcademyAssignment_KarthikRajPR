{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "@pytest.fixture(scope=\"function\")\n    def driver():\n        # Install the correct ChromeDriver version for Chrome 134\n        service = Service(ChromeDriverManager(driver_version=\"134.0.6998.0\").install())\n    \n        options = webdriver.ChromeOptions()\n        options.add_argument(\"--start-maximized\")\n>       driver = webdriver.Chrome(service=service, options=options)\n\n../../../../../../Downloads/capstone_scenario2_python/conftest.py:13: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n../../../../../../Downloads/capstone_scenario2_python/.venv/lib/python3.13/site-packages/selenium/webdriver/chrome/webdriver.py:47: in __init__\n    super().__init__(\n../../../../../../Downloads/capstone_scenario2_python/.venv/lib/python3.13/site-packages/selenium/webdriver/chromium/webdriver.py:69: in __init__\n    super().__init__(command_executor=executor, options=options)\n../../../../../../Downloads/capstone_scenario2_python/.venv/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:263: in __init__\n    self.start_session(capabilities)\n../../../../../../Downloads/capstone_scenario2_python/.venv/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:366: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n../../../../../../Downloads/capstone_scenario2_python/.venv/lib/python3.13/site-packages/selenium/webdriver/remote/webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x1074a1d30>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: This version of Chro...0001893dac0c _pthread_start + 136\\\\n19  libsystem_pthread.dylib             0x00000001893d5b80 thread_start + 8\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\")\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: This version of ChromeDriver only supports Chrome version 134\nE       Current browser version is 139.0.7258.140 with binary path /Applications/Google Chrome.app/Contents/MacOS/Google Chrome; For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#sessionnotcreatedexception\nE       Stacktrace:\nE       0   chromedriver                        0x00000001030d36c8 cxxbridge1$str$ptr + 2791212\nE       1   chromedriver                        0x00000001030cbc9c cxxbridge1$str$ptr + 2759936\nE       2   chromedriver                        0x0000000102c1de30 cxxbridge1$string$len + 92928\nE       3   chromedriver                        0x0000000102c56358 cxxbridge1$string$len + 323624\nE       4   chromedriver                        0x0000000102c554e0 cxxbridge1$string$len + 319920\nE       5   chromedriver                        0x0000000102c513bc cxxbridge1$string$len + 303244\nE       6   chromedriver                        0x0000000102c4d538 cxxbridge1$string$len + 287240\nE       7   chromedriver                        0x0000000102c927f0 cxxbridge1$string$len + 570560\nE       8   chromedriver                        0x0000000102c92064 cxxbridge1$string$len + 568628\nE       9   chromedriver                        0x0000000102c592fc cxxbridge1$string$len + 335820\nE       10  chromedriver                        0x00000001030986c4 cxxbridge1$str$ptr + 2549544\nE       11  chromedriver                        0x000000010309b988 cxxbridge1$str$ptr + 2562540\nE       12  chromedriver                        0x000000010307871c cxxbridge1$str$ptr + 2418560\nE       13  chromedriver                        0x000000010309c1e8 cxxbridge1$str$ptr + 2564684\nE       14  chromedriver                        0x0000000103069750 cxxbridge1$str$ptr + 2357172\nE       15  chromedriver                        0x00000001030bbf58 cxxbridge1$str$ptr + 2695100\nE       16  chromedriver                        0x00000001030bc0e0 cxxbridge1$str$ptr + 2695492\nE       17  chromedriver                        0x00000001030cb910 cxxbridge1$str$ptr + 2759028\nE       18  libsystem_pthread.dylib             0x00000001893dac0c _pthread_start + 136\nE       19  libsystem_pthread.dylib             0x00000001893d5b80 thread_start + 8\n\n../../../../../../Downloads/capstone_scenario2_python/.venv/lib/python3.13/site-packages/selenium/webdriver/remote/errorhandler.py:232: SessionNotCreatedException\n", "test_name": "test_dropdown_checkboxes_radios", "rerun": "0"}}, "suite_name": "tests/test_dropdown_checkboxes_radio.py"}}}, "date": "August 27, 2025", "start_time": 1756300678.774456, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "1"}